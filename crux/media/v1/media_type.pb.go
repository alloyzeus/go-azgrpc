// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crux/media/v1/media_type.proto

package mediapb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MediaType is the top-level media type. It roughly follows IANA's media
// type registry.
//
// See IETF RFC 2046
type MediaType int32

const (
	// The default value.
	MediaType_MEDIA_TYPE_UNSPECIFIED MediaType = 0
	// Type is unknown. This is usually used for when a process was unable
	// to determine the type.
	MediaType_MEDIA_TYPE_UNKNOWN MediaType = 1
	MediaType_TEXT               MediaType = 4
	MediaType_IMAGE              MediaType = 5
	MediaType_AUDIO              MediaType = 6
	MediaType_VIDEO              MediaType = 7
)

var MediaType_name = map[int32]string{
	0: "MEDIA_TYPE_UNSPECIFIED",
	1: "MEDIA_TYPE_UNKNOWN",
	4: "TEXT",
	5: "IMAGE",
	6: "AUDIO",
	7: "VIDEO",
}

var MediaType_value = map[string]int32{
	"MEDIA_TYPE_UNSPECIFIED": 0,
	"MEDIA_TYPE_UNKNOWN":     1,
	"TEXT":                   4,
	"IMAGE":                  5,
	"AUDIO":                  6,
	"VIDEO":                  7,
}

func (x MediaType) String() string {
	return proto.EnumName(MediaType_name, int32(x))
}

func (MediaType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a59a395879341e61, []int{0}
}

func init() {
	proto.RegisterEnum("crux.media.v1.MediaType", MediaType_name, MediaType_value)
}

func init() { proto.RegisterFile("crux/media/v1/media_type.proto", fileDescriptor_a59a395879341e61) }

var fileDescriptor_a59a395879341e61 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4b, 0x2e, 0x2a, 0xad,
	0xd0, 0xcf, 0x4d, 0x4d, 0xc9, 0x4c, 0xd4, 0x2f, 0x33, 0x84, 0x30, 0xe2, 0x4b, 0x2a, 0x0b, 0x52,
	0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x78, 0x41, 0xf2, 0x7a, 0x60, 0x61, 0xbd, 0x32, 0x43,
	0xad, 0x2c, 0x2e, 0x4e, 0x5f, 0x10, 0x3b, 0xa4, 0xb2, 0x20, 0x55, 0x48, 0x8a, 0x4b, 0xcc, 0xd7,
	0xd5, 0xc5, 0xd3, 0x31, 0x3e, 0x24, 0x32, 0xc0, 0x35, 0x3e, 0xd4, 0x2f, 0x38, 0xc0, 0xd5, 0xd9,
	0xd3, 0xcd, 0xd3, 0xd5, 0x45, 0x80, 0x41, 0x48, 0x8c, 0x4b, 0x08, 0x45, 0xce, 0xdb, 0xcf, 0x3f,
	0xdc, 0x4f, 0x80, 0x51, 0x88, 0x83, 0x8b, 0x25, 0xc4, 0x35, 0x22, 0x44, 0x80, 0x45, 0x88, 0x93,
	0x8b, 0xd5, 0xd3, 0xd7, 0xd1, 0xdd, 0x55, 0x80, 0x15, 0xc4, 0x74, 0x0c, 0x75, 0xf1, 0xf4, 0x17,
	0x60, 0x03, 0x31, 0xc3, 0x3c, 0x5d, 0x5c, 0xfd, 0x05, 0xd8, 0x9d, 0xbc, 0x4f, 0x3c, 0x92, 0x63,
	0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96,
	0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x30, 0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39,
	0x3f, 0x57, 0xbf, 0x28, 0xb5, 0x4a, 0x37, 0x3d, 0x5f, 0x1f, 0xe4, 0x4c, 0xdd, 0xc4, 0x82, 0xcc,
	0x62, 0x7d, 0x14, 0x0f, 0x59, 0x83, 0x19, 0x05, 0x49, 0x49, 0x6c, 0x60, 0xef, 0x18, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xc9, 0x45, 0x7b, 0xee, 0xf0, 0x00, 0x00, 0x00,
}
