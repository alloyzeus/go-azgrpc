// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: azgrpc/iam/v1/terminal.proto

package iampb

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TerminalInfo struct {
	// Display name of the instance. Used so the user could identify the
	// instance. Recommended value is the name of the device or service
	// instance's unique identifier.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// User's preferred language if this terminal is an end-user terminal.
	// Value syntax is same as HTTP's Accept-Language header
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language
	AcceptLanguage string `protobuf:"bytes,6,opt,name=accept_language,json=acceptLanguage,proto3" json:"accept_language,omitempty"`
}

func (m *TerminalInfo) Reset()         { *m = TerminalInfo{} }
func (m *TerminalInfo) String() string { return proto.CompactTextString(m) }
func (*TerminalInfo) ProtoMessage()    {}
func (*TerminalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd787c5faf0d7e2, []int{0}
}
func (m *TerminalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TerminalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TerminalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TerminalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TerminalInfo.Merge(m, src)
}
func (m *TerminalInfo) XXX_Size() int {
	return m.Size()
}
func (m *TerminalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TerminalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TerminalInfo proto.InternalMessageInfo

func (m *TerminalInfo) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *TerminalInfo) GetAcceptLanguage() string {
	if m != nil {
		return m.AcceptLanguage
	}
	return ""
}

type InitiateUserTerminalAuthorizationByPhoneNumberRequest struct {
	ClientCredentials *ClientCredentials `protobuf:"bytes,1,opt,name=client_credentials,json=clientCredentials,proto3" json:"client_credentials,omitempty"`
	TerminalInfo      *TerminalInfo      `protobuf:"bytes,2,opt,name=terminal_info,json=terminalInfo,proto3" json:"terminal_info,omitempty"`
	PhoneNumber       string             `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) Reset() {
	*m = InitiateUserTerminalAuthorizationByPhoneNumberRequest{}
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) String() string {
	return proto.CompactTextString(m)
}
func (*InitiateUserTerminalAuthorizationByPhoneNumberRequest) ProtoMessage() {}
func (*InitiateUserTerminalAuthorizationByPhoneNumberRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd787c5faf0d7e2, []int{1}
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitiateUserTerminalAuthorizationByPhoneNumberRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateUserTerminalAuthorizationByPhoneNumberRequest.Merge(m, src)
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) XXX_Size() int {
	return m.Size()
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateUserTerminalAuthorizationByPhoneNumberRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateUserTerminalAuthorizationByPhoneNumberRequest proto.InternalMessageInfo

func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) GetClientCredentials() *ClientCredentials {
	if m != nil {
		return m.ClientCredentials
	}
	return nil
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) GetTerminalInfo() *TerminalInfo {
	if m != nil {
		return m.TerminalInfo
	}
	return nil
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type InitiateUserTerminalAuthorizationByPhoneNumberResponse struct {
	TerminalId                 string           `protobuf:"bytes,1,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	VerificationCodeExpiryTime *types.Timestamp `protobuf:"bytes,2,opt,name=verification_code_expiry_time,json=verificationCodeExpiryTime,proto3" json:"verification_code_expiry_time,omitempty"`
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) Reset() {
	*m = InitiateUserTerminalAuthorizationByPhoneNumberResponse{}
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) String() string {
	return proto.CompactTextString(m)
}
func (*InitiateUserTerminalAuthorizationByPhoneNumberResponse) ProtoMessage() {}
func (*InitiateUserTerminalAuthorizationByPhoneNumberResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd787c5faf0d7e2, []int{2}
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitiateUserTerminalAuthorizationByPhoneNumberResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitiateUserTerminalAuthorizationByPhoneNumberResponse.Merge(m, src)
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) XXX_Size() int {
	return m.Size()
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InitiateUserTerminalAuthorizationByPhoneNumberResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InitiateUserTerminalAuthorizationByPhoneNumberResponse proto.InternalMessageInfo

func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) GetTerminalId() string {
	if m != nil {
		return m.TerminalId
	}
	return ""
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) GetVerificationCodeExpiryTime() *types.Timestamp {
	if m != nil {
		return m.VerificationCodeExpiryTime
	}
	return nil
}

type ConfirmTerminalAuthorizationRequest struct {
	TerminalId       string `protobuf:"bytes,1,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	VerificationCode string `protobuf:"bytes,2,opt,name=verification_code,json=verificationCode,proto3" json:"verification_code,omitempty"`
}

func (m *ConfirmTerminalAuthorizationRequest) Reset()         { *m = ConfirmTerminalAuthorizationRequest{} }
func (m *ConfirmTerminalAuthorizationRequest) String() string { return proto.CompactTextString(m) }
func (*ConfirmTerminalAuthorizationRequest) ProtoMessage()    {}
func (*ConfirmTerminalAuthorizationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd787c5faf0d7e2, []int{3}
}
func (m *ConfirmTerminalAuthorizationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmTerminalAuthorizationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmTerminalAuthorizationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmTerminalAuthorizationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmTerminalAuthorizationRequest.Merge(m, src)
}
func (m *ConfirmTerminalAuthorizationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmTerminalAuthorizationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmTerminalAuthorizationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmTerminalAuthorizationRequest proto.InternalMessageInfo

func (m *ConfirmTerminalAuthorizationRequest) GetTerminalId() string {
	if m != nil {
		return m.TerminalId
	}
	return ""
}

func (m *ConfirmTerminalAuthorizationRequest) GetVerificationCode() string {
	if m != nil {
		return m.VerificationCode
	}
	return ""
}

type ConfirmTerminalAuthorizationResponse struct {
	TerminalSecret string `protobuf:"bytes,1,opt,name=terminal_secret,json=terminalSecret,proto3" json:"terminal_secret,omitempty"`
}

func (m *ConfirmTerminalAuthorizationResponse) Reset()         { *m = ConfirmTerminalAuthorizationResponse{} }
func (m *ConfirmTerminalAuthorizationResponse) String() string { return proto.CompactTextString(m) }
func (*ConfirmTerminalAuthorizationResponse) ProtoMessage()    {}
func (*ConfirmTerminalAuthorizationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd787c5faf0d7e2, []int{4}
}
func (m *ConfirmTerminalAuthorizationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConfirmTerminalAuthorizationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConfirmTerminalAuthorizationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConfirmTerminalAuthorizationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfirmTerminalAuthorizationResponse.Merge(m, src)
}
func (m *ConfirmTerminalAuthorizationResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConfirmTerminalAuthorizationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfirmTerminalAuthorizationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConfirmTerminalAuthorizationResponse proto.InternalMessageInfo

func (m *ConfirmTerminalAuthorizationResponse) GetTerminalSecret() string {
	if m != nil {
		return m.TerminalSecret
	}
	return ""
}

type GenerateAccessTokenByTerminalCredentialsRequest struct {
	TerminalId     string `protobuf:"bytes,1,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	TerminalSecret string `protobuf:"bytes,2,opt,name=terminal_secret,json=terminalSecret,proto3" json:"terminal_secret,omitempty"`
}

func (m *GenerateAccessTokenByTerminalCredentialsRequest) Reset() {
	*m = GenerateAccessTokenByTerminalCredentialsRequest{}
}
func (m *GenerateAccessTokenByTerminalCredentialsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*GenerateAccessTokenByTerminalCredentialsRequest) ProtoMessage() {}
func (*GenerateAccessTokenByTerminalCredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd787c5faf0d7e2, []int{5}
}
func (m *GenerateAccessTokenByTerminalCredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateAccessTokenByTerminalCredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateAccessTokenByTerminalCredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateAccessTokenByTerminalCredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateAccessTokenByTerminalCredentialsRequest.Merge(m, src)
}
func (m *GenerateAccessTokenByTerminalCredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GenerateAccessTokenByTerminalCredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateAccessTokenByTerminalCredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateAccessTokenByTerminalCredentialsRequest proto.InternalMessageInfo

func (m *GenerateAccessTokenByTerminalCredentialsRequest) GetTerminalId() string {
	if m != nil {
		return m.TerminalId
	}
	return ""
}

func (m *GenerateAccessTokenByTerminalCredentialsRequest) GetTerminalSecret() string {
	if m != nil {
		return m.TerminalSecret
	}
	return ""
}

type GenerateAccessTokenByTerminalCredentialsResponse struct {
	AccessToken       string             `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	AuthorizationData *AuthorizationData `protobuf:"bytes,2,opt,name=authorization_data,json=authorizationData,proto3" json:"authorization_data,omitempty"`
}

func (m *GenerateAccessTokenByTerminalCredentialsResponse) Reset() {
	*m = GenerateAccessTokenByTerminalCredentialsResponse{}
}
func (m *GenerateAccessTokenByTerminalCredentialsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*GenerateAccessTokenByTerminalCredentialsResponse) ProtoMessage() {}
func (*GenerateAccessTokenByTerminalCredentialsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cdd787c5faf0d7e2, []int{6}
}
func (m *GenerateAccessTokenByTerminalCredentialsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenerateAccessTokenByTerminalCredentialsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenerateAccessTokenByTerminalCredentialsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenerateAccessTokenByTerminalCredentialsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenerateAccessTokenByTerminalCredentialsResponse.Merge(m, src)
}
func (m *GenerateAccessTokenByTerminalCredentialsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GenerateAccessTokenByTerminalCredentialsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenerateAccessTokenByTerminalCredentialsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenerateAccessTokenByTerminalCredentialsResponse proto.InternalMessageInfo

func (m *GenerateAccessTokenByTerminalCredentialsResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *GenerateAccessTokenByTerminalCredentialsResponse) GetAuthorizationData() *AuthorizationData {
	if m != nil {
		return m.AuthorizationData
	}
	return nil
}

func init() {
	proto.RegisterType((*TerminalInfo)(nil), "azgrpc.iam.v1.TerminalInfo")
	proto.RegisterType((*InitiateUserTerminalAuthorizationByPhoneNumberRequest)(nil), "azgrpc.iam.v1.InitiateUserTerminalAuthorizationByPhoneNumberRequest")
	proto.RegisterType((*InitiateUserTerminalAuthorizationByPhoneNumberResponse)(nil), "azgrpc.iam.v1.InitiateUserTerminalAuthorizationByPhoneNumberResponse")
	proto.RegisterType((*ConfirmTerminalAuthorizationRequest)(nil), "azgrpc.iam.v1.ConfirmTerminalAuthorizationRequest")
	proto.RegisterType((*ConfirmTerminalAuthorizationResponse)(nil), "azgrpc.iam.v1.ConfirmTerminalAuthorizationResponse")
	proto.RegisterType((*GenerateAccessTokenByTerminalCredentialsRequest)(nil), "azgrpc.iam.v1.GenerateAccessTokenByTerminalCredentialsRequest")
	proto.RegisterType((*GenerateAccessTokenByTerminalCredentialsResponse)(nil), "azgrpc.iam.v1.GenerateAccessTokenByTerminalCredentialsResponse")
}

func init() { proto.RegisterFile("azgrpc/iam/v1/terminal.proto", fileDescriptor_cdd787c5faf0d7e2) }

var fileDescriptor_cdd787c5faf0d7e2 = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x4f, 0xd4, 0x50,
	0x10, 0xa6, 0x68, 0x48, 0x78, 0xbb, 0x80, 0xf4, 0xb4, 0xa9, 0xb8, 0xc0, 0x6a, 0x02, 0x89, 0xb1,
	0x95, 0x25, 0x7a, 0x31, 0x51, 0x61, 0x21, 0x86, 0x84, 0x80, 0x29, 0x78, 0x21, 0x31, 0xcd, 0xec,
	0xdb, 0xd9, 0xf2, 0x62, 0xfb, 0x5e, 0x7d, 0x7d, 0xdd, 0xb8, 0xf8, 0x03, 0xbc, 0x7a, 0xf2, 0x27,
	0x78, 0xf1, 0x0f, 0x78, 0xf1, 0xee, 0x91, 0xa3, 0x47, 0x03, 0x67, 0xff, 0x83, 0xd9, 0xf6, 0x95,
	0xdd, 0xad, 0x1b, 0x60, 0xf1, 0xd8, 0xe9, 0x37, 0xf3, 0x7d, 0xf3, 0xcd, 0x4c, 0x4b, 0x16, 0xe0,
	0xc4, 0x97, 0x11, 0x75, 0x18, 0x84, 0x4e, 0x67, 0xcd, 0x51, 0x28, 0x43, 0xc6, 0x21, 0xb0, 0x23,
	0x29, 0x94, 0x30, 0x67, 0xb2, 0xb7, 0x36, 0x83, 0xd0, 0xee, 0xac, 0x59, 0xcb, 0xc3, 0x60, 0x48,
	0xd4, 0xb1, 0x90, 0xec, 0x04, 0x14, 0x13, 0x3c, 0xcb, 0xb0, 0xac, 0x61, 0x08, 0x0d, 0x18, 0x72,
	0xa5, 0xdf, 0x2d, 0xfa, 0x42, 0xf8, 0x01, 0x3a, 0xe9, 0x53, 0x33, 0x69, 0x3b, 0x8a, 0x85, 0x18,
	0x2b, 0x08, 0xa3, 0x0c, 0x50, 0x3b, 0x22, 0xe5, 0x43, 0x2d, 0x60, 0x87, 0xb7, 0x85, 0xb9, 0x4c,
	0xca, 0x2d, 0x16, 0x47, 0x01, 0x74, 0x3d, 0x0e, 0x21, 0x56, 0x6e, 0x2d, 0x19, 0xab, 0xd3, 0x6e,
	0x49, 0xc7, 0xf6, 0x20, 0x44, 0x73, 0x85, 0xcc, 0x01, 0xa5, 0x18, 0x29, 0x2f, 0x00, 0xee, 0x27,
	0xe0, 0x63, 0x65, 0x2a, 0x45, 0xcd, 0x66, 0xe1, 0x5d, 0x1d, 0xad, 0xfd, 0x31, 0xc8, 0x93, 0x1d,
	0xce, 0x14, 0x03, 0x85, 0x6f, 0x62, 0x94, 0x39, 0xd1, 0xc6, 0x60, 0x13, 0x9b, 0xdd, 0xd7, 0xc7,
	0x82, 0xe3, 0x5e, 0x12, 0x36, 0x51, 0xba, 0xf8, 0x3e, 0xc1, 0x58, 0x99, 0xfb, 0xc4, 0xcc, 0xda,
	0xf0, 0xa8, 0xc4, 0x16, 0x72, 0xc5, 0x20, 0x88, 0x2b, 0xc6, 0x92, 0xb1, 0x5a, 0xaa, 0x2f, 0xd9,
	0x43, 0x0e, 0xd9, 0x8d, 0x14, 0xd8, 0xe8, 0xe3, 0xdc, 0x79, 0x5a, 0x0c, 0x99, 0x2f, 0xc9, 0x4c,
	0xee, 0xb3, 0xc7, 0x78, 0x5b, 0x54, 0x26, 0xd3, 0x5a, 0x77, 0x0b, 0xb5, 0x06, 0xad, 0x70, 0xcb,
	0xaa, 0x60, 0x4c, 0xd4, 0x13, 0xea, 0xf1, 0x54, 0x69, 0x6e, 0x4c, 0xd4, 0x17, 0x5f, 0xfb, 0x6e,
	0x90, 0xa7, 0xe3, 0xf6, 0x1b, 0x47, 0x82, 0xc7, 0x68, 0x2e, 0x92, 0x52, 0x5f, 0x5f, 0x2b, 0xed,
	0x74, 0xda, 0x25, 0x17, 0x02, 0x5a, 0xe6, 0x5b, 0x72, 0xaf, 0x83, 0x92, 0xb5, 0x19, 0x4d, 0xab,
	0x78, 0x54, 0xb4, 0xd0, 0xc3, 0x0f, 0x11, 0x93, 0x5d, 0xaf, 0x37, 0x53, 0xdd, 0x90, 0x65, 0x67,
	0x03, 0xb7, 0xf3, 0x81, 0xdb, 0x87, 0xf9, 0xc0, 0x5d, 0x6b, 0xb0, 0x40, 0x43, 0xb4, 0x70, 0x3b,
	0x4d, 0xef, 0x01, 0x6a, 0x31, 0xb9, 0xdf, 0x10, 0xbc, 0xcd, 0x64, 0x38, 0x52, 0x74, 0x3e, 0x97,
	0x2b, 0x65, 0x3e, 0x24, 0xf3, 0xff, 0xc8, 0x4c, 0xa5, 0x4d, 0xbb, 0x77, 0x8a, 0xf4, 0xb5, 0x7d,
	0xf2, 0xe0, 0x72, 0x52, 0x6d, 0xce, 0x0a, 0x99, 0xbb, 0x60, 0x8d, 0x91, 0x4a, 0x54, 0x9a, 0x79,
	0x36, 0x0f, 0x1f, 0xa4, 0xd1, 0xda, 0x47, 0xe2, 0xbc, 0x42, 0x8e, 0x12, 0x14, 0x6e, 0x50, 0x8a,
	0x71, 0x7c, 0x28, 0xde, 0x21, 0xdf, 0xec, 0xe6, 0xe5, 0x07, 0x97, 0xe4, 0xba, 0x1d, 0x8d, 0x20,
	0x9f, 0x1c, 0x49, 0xfe, 0xd5, 0x20, 0x8f, 0xaf, 0xcf, 0xae, 0x5b, 0x5b, 0x26, 0x65, 0x48, 0xb1,
	0x9e, 0xea, 0x81, 0x35, 0x7f, 0x09, 0xfa, 0xf9, 0xbd, 0x5b, 0x18, 0xba, 0x7a, 0xaf, 0x05, 0x0a,
	0xf4, 0xb8, 0x8b, 0xb7, 0x30, 0xe4, 0xdf, 0x16, 0x28, 0x70, 0xe7, 0xa1, 0x18, 0xaa, 0x7f, 0xb9,
	0x4d, 0x16, 0x46, 0x1a, 0x7e, 0x80, 0xb2, 0xc3, 0x28, 0x9a, 0x3f, 0x0c, 0x62, 0x8f, 0xb7, 0xc7,
	0xe6, 0x56, 0x41, 0xc8, 0x8d, 0xce, 0xde, 0xda, 0xfe, 0xcf, 0x2a, 0xda, 0xd4, 0x4f, 0x06, 0x59,
	0xb8, 0x6c, 0xb1, 0xcc, 0x7a, 0xf1, 0x13, 0x72, 0xf5, 0xea, 0x5b, 0xeb, 0x63, 0xe5, 0x68, 0x25,
	0xdf, 0x0c, 0xb2, 0x7a, 0xdd, 0x9d, 0x30, 0x9f, 0x17, 0x18, 0xc6, 0x5c, 0x65, 0xeb, 0xc5, 0x8d,
	0xf3, 0x33, 0xb5, 0x9b, 0xbb, 0x3f, 0xcf, 0xaa, 0xc6, 0xe9, 0x59, 0xd5, 0xf8, 0x7d, 0x56, 0x35,
	0x3e, 0x9f, 0x57, 0x27, 0x4e, 0xcf, 0xab, 0x13, 0xbf, 0xce, 0xab, 0x13, 0x47, 0x75, 0x9f, 0xa9,
	0xe3, 0xa4, 0x69, 0x53, 0x11, 0x3a, 0x10, 0x04, 0xa2, 0x7b, 0x82, 0x49, 0xec, 0xf8, 0xe2, 0x91,
	0xfe, 0xf5, 0x0c, 0xfd, 0x81, 0x9e, 0x31, 0x08, 0xa3, 0x66, 0x73, 0x2a, 0xfd, 0x04, 0xad, 0xff,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x24, 0x00, 0x19, 0xef, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TerminalAuthorizationServiceClient is the client API for TerminalAuthorizationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TerminalAuthorizationServiceClient interface {
	InitiateUserTerminalAuthorizationByPhoneNumber(ctx context.Context, in *InitiateUserTerminalAuthorizationByPhoneNumberRequest, opts ...grpc.CallOption) (*InitiateUserTerminalAuthorizationByPhoneNumberResponse, error)
	ConfirmTerminalAuthorization(ctx context.Context, in *ConfirmTerminalAuthorizationRequest, opts ...grpc.CallOption) (*ConfirmTerminalAuthorizationResponse, error)
	GenerateAccessTokenByTerminalCredentials(ctx context.Context, in *GenerateAccessTokenByTerminalCredentialsRequest, opts ...grpc.CallOption) (*GenerateAccessTokenByTerminalCredentialsResponse, error)
}

type terminalAuthorizationServiceClient struct {
	cc *grpc.ClientConn
}

func NewTerminalAuthorizationServiceClient(cc *grpc.ClientConn) TerminalAuthorizationServiceClient {
	return &terminalAuthorizationServiceClient{cc}
}

func (c *terminalAuthorizationServiceClient) InitiateUserTerminalAuthorizationByPhoneNumber(ctx context.Context, in *InitiateUserTerminalAuthorizationByPhoneNumberRequest, opts ...grpc.CallOption) (*InitiateUserTerminalAuthorizationByPhoneNumberResponse, error) {
	out := new(InitiateUserTerminalAuthorizationByPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/azgrpc.iam.v1.TerminalAuthorizationService/InitiateUserTerminalAuthorizationByPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalAuthorizationServiceClient) ConfirmTerminalAuthorization(ctx context.Context, in *ConfirmTerminalAuthorizationRequest, opts ...grpc.CallOption) (*ConfirmTerminalAuthorizationResponse, error) {
	out := new(ConfirmTerminalAuthorizationResponse)
	err := c.cc.Invoke(ctx, "/azgrpc.iam.v1.TerminalAuthorizationService/ConfirmTerminalAuthorization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *terminalAuthorizationServiceClient) GenerateAccessTokenByTerminalCredentials(ctx context.Context, in *GenerateAccessTokenByTerminalCredentialsRequest, opts ...grpc.CallOption) (*GenerateAccessTokenByTerminalCredentialsResponse, error) {
	out := new(GenerateAccessTokenByTerminalCredentialsResponse)
	err := c.cc.Invoke(ctx, "/azgrpc.iam.v1.TerminalAuthorizationService/GenerateAccessTokenByTerminalCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TerminalAuthorizationServiceServer is the server API for TerminalAuthorizationService service.
type TerminalAuthorizationServiceServer interface {
	InitiateUserTerminalAuthorizationByPhoneNumber(context.Context, *InitiateUserTerminalAuthorizationByPhoneNumberRequest) (*InitiateUserTerminalAuthorizationByPhoneNumberResponse, error)
	ConfirmTerminalAuthorization(context.Context, *ConfirmTerminalAuthorizationRequest) (*ConfirmTerminalAuthorizationResponse, error)
	GenerateAccessTokenByTerminalCredentials(context.Context, *GenerateAccessTokenByTerminalCredentialsRequest) (*GenerateAccessTokenByTerminalCredentialsResponse, error)
}

// UnimplementedTerminalAuthorizationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTerminalAuthorizationServiceServer struct {
}

func (*UnimplementedTerminalAuthorizationServiceServer) InitiateUserTerminalAuthorizationByPhoneNumber(ctx context.Context, req *InitiateUserTerminalAuthorizationByPhoneNumberRequest) (*InitiateUserTerminalAuthorizationByPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateUserTerminalAuthorizationByPhoneNumber not implemented")
}
func (*UnimplementedTerminalAuthorizationServiceServer) ConfirmTerminalAuthorization(ctx context.Context, req *ConfirmTerminalAuthorizationRequest) (*ConfirmTerminalAuthorizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTerminalAuthorization not implemented")
}
func (*UnimplementedTerminalAuthorizationServiceServer) GenerateAccessTokenByTerminalCredentials(ctx context.Context, req *GenerateAccessTokenByTerminalCredentialsRequest) (*GenerateAccessTokenByTerminalCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAccessTokenByTerminalCredentials not implemented")
}

func RegisterTerminalAuthorizationServiceServer(s *grpc.Server, srv TerminalAuthorizationServiceServer) {
	s.RegisterService(&_TerminalAuthorizationService_serviceDesc, srv)
}

func _TerminalAuthorizationService_InitiateUserTerminalAuthorizationByPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateUserTerminalAuthorizationByPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalAuthorizationServiceServer).InitiateUserTerminalAuthorizationByPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azgrpc.iam.v1.TerminalAuthorizationService/InitiateUserTerminalAuthorizationByPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalAuthorizationServiceServer).InitiateUserTerminalAuthorizationByPhoneNumber(ctx, req.(*InitiateUserTerminalAuthorizationByPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalAuthorizationService_ConfirmTerminalAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmTerminalAuthorizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalAuthorizationServiceServer).ConfirmTerminalAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azgrpc.iam.v1.TerminalAuthorizationService/ConfirmTerminalAuthorization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalAuthorizationServiceServer).ConfirmTerminalAuthorization(ctx, req.(*ConfirmTerminalAuthorizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TerminalAuthorizationService_GenerateAccessTokenByTerminalCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAccessTokenByTerminalCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalAuthorizationServiceServer).GenerateAccessTokenByTerminalCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azgrpc.iam.v1.TerminalAuthorizationService/GenerateAccessTokenByTerminalCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalAuthorizationServiceServer).GenerateAccessTokenByTerminalCredentials(ctx, req.(*GenerateAccessTokenByTerminalCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TerminalAuthorizationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "azgrpc.iam.v1.TerminalAuthorizationService",
	HandlerType: (*TerminalAuthorizationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateUserTerminalAuthorizationByPhoneNumber",
			Handler:    _TerminalAuthorizationService_InitiateUserTerminalAuthorizationByPhoneNumber_Handler,
		},
		{
			MethodName: "ConfirmTerminalAuthorization",
			Handler:    _TerminalAuthorizationService_ConfirmTerminalAuthorization_Handler,
		},
		{
			MethodName: "GenerateAccessTokenByTerminalCredentials",
			Handler:    _TerminalAuthorizationService_GenerateAccessTokenByTerminalCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "azgrpc/iam/v1/terminal.proto",
}

func (m *TerminalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TerminalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TerminalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AcceptLanguage) > 0 {
		i -= len(m.AcceptLanguage)
		copy(dAtA[i:], m.AcceptLanguage)
		i = encodeVarintTerminal(dAtA, i, uint64(len(m.AcceptLanguage)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTerminal(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintTerminal(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TerminalInfo != nil {
		{
			size, err := m.TerminalInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTerminal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ClientCredentials != nil {
		{
			size, err := m.ClientCredentials.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTerminal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerificationCodeExpiryTime != nil {
		{
			size, err := m.VerificationCodeExpiryTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTerminal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TerminalId) > 0 {
		i -= len(m.TerminalId)
		copy(dAtA[i:], m.TerminalId)
		i = encodeVarintTerminal(dAtA, i, uint64(len(m.TerminalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmTerminalAuthorizationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmTerminalAuthorizationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmTerminalAuthorizationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationCode) > 0 {
		i -= len(m.VerificationCode)
		copy(dAtA[i:], m.VerificationCode)
		i = encodeVarintTerminal(dAtA, i, uint64(len(m.VerificationCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TerminalId) > 0 {
		i -= len(m.TerminalId)
		copy(dAtA[i:], m.TerminalId)
		i = encodeVarintTerminal(dAtA, i, uint64(len(m.TerminalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConfirmTerminalAuthorizationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConfirmTerminalAuthorizationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConfirmTerminalAuthorizationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TerminalSecret) > 0 {
		i -= len(m.TerminalSecret)
		copy(dAtA[i:], m.TerminalSecret)
		i = encodeVarintTerminal(dAtA, i, uint64(len(m.TerminalSecret)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenerateAccessTokenByTerminalCredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateAccessTokenByTerminalCredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateAccessTokenByTerminalCredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TerminalSecret) > 0 {
		i -= len(m.TerminalSecret)
		copy(dAtA[i:], m.TerminalSecret)
		i = encodeVarintTerminal(dAtA, i, uint64(len(m.TerminalSecret)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TerminalId) > 0 {
		i -= len(m.TerminalId)
		copy(dAtA[i:], m.TerminalId)
		i = encodeVarintTerminal(dAtA, i, uint64(len(m.TerminalId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenerateAccessTokenByTerminalCredentialsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenerateAccessTokenByTerminalCredentialsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenerateAccessTokenByTerminalCredentialsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuthorizationData != nil {
		{
			size, err := m.AuthorizationData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTerminal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintTerminal(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTerminal(dAtA []byte, offset int, v uint64) int {
	offset -= sovTerminal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TerminalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTerminal(uint64(l))
	}
	l = len(m.AcceptLanguage)
	if l > 0 {
		n += 1 + l + sovTerminal(uint64(l))
	}
	return n
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientCredentials != nil {
		l = m.ClientCredentials.Size()
		n += 1 + l + sovTerminal(uint64(l))
	}
	if m.TerminalInfo != nil {
		l = m.TerminalInfo.Size()
		n += 1 + l + sovTerminal(uint64(l))
	}
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovTerminal(uint64(l))
	}
	return n
}

func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TerminalId)
	if l > 0 {
		n += 1 + l + sovTerminal(uint64(l))
	}
	if m.VerificationCodeExpiryTime != nil {
		l = m.VerificationCodeExpiryTime.Size()
		n += 1 + l + sovTerminal(uint64(l))
	}
	return n
}

func (m *ConfirmTerminalAuthorizationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TerminalId)
	if l > 0 {
		n += 1 + l + sovTerminal(uint64(l))
	}
	l = len(m.VerificationCode)
	if l > 0 {
		n += 1 + l + sovTerminal(uint64(l))
	}
	return n
}

func (m *ConfirmTerminalAuthorizationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TerminalSecret)
	if l > 0 {
		n += 1 + l + sovTerminal(uint64(l))
	}
	return n
}

func (m *GenerateAccessTokenByTerminalCredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TerminalId)
	if l > 0 {
		n += 1 + l + sovTerminal(uint64(l))
	}
	l = len(m.TerminalSecret)
	if l > 0 {
		n += 1 + l + sovTerminal(uint64(l))
	}
	return n
}

func (m *GenerateAccessTokenByTerminalCredentialsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovTerminal(uint64(l))
	}
	if m.AuthorizationData != nil {
		l = m.AuthorizationData.Size()
		n += 1 + l + sovTerminal(uint64(l))
	}
	return n
}

func sovTerminal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTerminal(x uint64) (n int) {
	return sovTerminal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TerminalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerminal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TerminalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TerminalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AcceptLanguage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AcceptLanguage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerminal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTerminal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerminal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiateUserTerminalAuthorizationByPhoneNumberRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiateUserTerminalAuthorizationByPhoneNumberRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientCredentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClientCredentials == nil {
				m.ClientCredentials = &ClientCredentials{}
			}
			if err := m.ClientCredentials.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TerminalInfo == nil {
				m.TerminalInfo = &TerminalInfo{}
			}
			if err := m.TerminalInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerminal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTerminal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitiateUserTerminalAuthorizationByPhoneNumberResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerminal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitiateUserTerminalAuthorizationByPhoneNumberResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitiateUserTerminalAuthorizationByPhoneNumberResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationCodeExpiryTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerificationCodeExpiryTime == nil {
				m.VerificationCodeExpiryTime = &types.Timestamp{}
			}
			if err := m.VerificationCodeExpiryTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerminal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTerminal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmTerminalAuthorizationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerminal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmTerminalAuthorizationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmTerminalAuthorizationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerminal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTerminal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConfirmTerminalAuthorizationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerminal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConfirmTerminalAuthorizationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConfirmTerminalAuthorizationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerminal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTerminal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateAccessTokenByTerminalCredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerminal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateAccessTokenByTerminalCredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateAccessTokenByTerminalCredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalSecret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalSecret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerminal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTerminal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenerateAccessTokenByTerminalCredentialsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTerminal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenerateAccessTokenByTerminalCredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenerateAccessTokenByTerminalCredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTerminal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTerminal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuthorizationData == nil {
				m.AuthorizationData = &AuthorizationData{}
			}
			if err := m.AuthorizationData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTerminal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTerminal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTerminal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTerminal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTerminal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTerminal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTerminal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTerminal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTerminal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTerminal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTerminal = fmt.Errorf("proto: unexpected end of group")
)
