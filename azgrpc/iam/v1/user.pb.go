// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: azgrpc/iam/v1/user.proto

package iampb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Very minimal profile of a user.
type UserBaseProfileData struct {
	DisplayName     string `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ProfileImageUrl string `protobuf:"bytes,2,opt,name=profile_image_url,json=profileImageUrl,proto3" json:"profile_image_url,omitempty"`
}

func (m *UserBaseProfileData) Reset()         { *m = UserBaseProfileData{} }
func (m *UserBaseProfileData) String() string { return proto.CompactTextString(m) }
func (*UserBaseProfileData) ProtoMessage()    {}
func (*UserBaseProfileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b15fe763a32a1aa9, []int{0}
}
func (m *UserBaseProfileData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBaseProfileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserBaseProfileData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserBaseProfileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBaseProfileData.Merge(m, src)
}
func (m *UserBaseProfileData) XXX_Size() int {
	return m.Size()
}
func (m *UserBaseProfileData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBaseProfileData.DiscardUnknown(m)
}

var xxx_messageInfo_UserBaseProfileData proto.InternalMessageInfo

func (m *UserBaseProfileData) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *UserBaseProfileData) GetProfileImageUrl() string {
	if m != nil {
		return m.ProfileImageUrl
	}
	return ""
}

type UserAccountVerificationData struct {
	Verified bool `protobuf:"varint,1,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (m *UserAccountVerificationData) Reset()         { *m = UserAccountVerificationData{} }
func (m *UserAccountVerificationData) String() string { return proto.CompactTextString(m) }
func (*UserAccountVerificationData) ProtoMessage()    {}
func (*UserAccountVerificationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b15fe763a32a1aa9, []int{1}
}
func (m *UserAccountVerificationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAccountVerificationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAccountVerificationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAccountVerificationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAccountVerificationData.Merge(m, src)
}
func (m *UserAccountVerificationData) XXX_Size() int {
	return m.Size()
}
func (m *UserAccountVerificationData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAccountVerificationData.DiscardUnknown(m)
}

var xxx_messageInfo_UserAccountVerificationData proto.InternalMessageInfo

func (m *UserAccountVerificationData) GetVerified() bool {
	if m != nil {
		return m.Verified
	}
	return false
}

type UserAccountDeactivationData struct {
	Deactivated bool `protobuf:"varint,1,opt,name=deactivated,proto3" json:"deactivated,omitempty"`
}

func (m *UserAccountDeactivationData) Reset()         { *m = UserAccountDeactivationData{} }
func (m *UserAccountDeactivationData) String() string { return proto.CompactTextString(m) }
func (*UserAccountDeactivationData) ProtoMessage()    {}
func (*UserAccountDeactivationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b15fe763a32a1aa9, []int{2}
}
func (m *UserAccountDeactivationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAccountDeactivationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAccountDeactivationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAccountDeactivationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAccountDeactivationData.Merge(m, src)
}
func (m *UserAccountDeactivationData) XXX_Size() int {
	return m.Size()
}
func (m *UserAccountDeactivationData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAccountDeactivationData.DiscardUnknown(m)
}

var xxx_messageInfo_UserAccountDeactivationData proto.InternalMessageInfo

func (m *UserAccountDeactivationData) GetDeactivated() bool {
	if m != nil {
		return m.Deactivated
	}
	return false
}

type UserAccountInfoData struct {
	Verification *UserAccountVerificationData `protobuf:"bytes,3,opt,name=verification,proto3" json:"verification,omitempty"`
	Deactivation *UserAccountDeactivationData `protobuf:"bytes,4,opt,name=deactivation,proto3" json:"deactivation,omitempty"`
}

func (m *UserAccountInfoData) Reset()         { *m = UserAccountInfoData{} }
func (m *UserAccountInfoData) String() string { return proto.CompactTextString(m) }
func (*UserAccountInfoData) ProtoMessage()    {}
func (*UserAccountInfoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b15fe763a32a1aa9, []int{3}
}
func (m *UserAccountInfoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAccountInfoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAccountInfoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAccountInfoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAccountInfoData.Merge(m, src)
}
func (m *UserAccountInfoData) XXX_Size() int {
	return m.Size()
}
func (m *UserAccountInfoData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAccountInfoData.DiscardUnknown(m)
}

var xxx_messageInfo_UserAccountInfoData proto.InternalMessageInfo

func (m *UserAccountInfoData) GetVerification() *UserAccountVerificationData {
	if m != nil {
		return m.Verification
	}
	return nil
}

func (m *UserAccountInfoData) GetDeactivation() *UserAccountDeactivationData {
	if m != nil {
		return m.Deactivation
	}
	return nil
}

type UserAccountStateData struct {
	Deactivation *UserAccountDeactivationData `protobuf:"bytes,3,opt,name=deactivation,proto3" json:"deactivation,omitempty"`
}

func (m *UserAccountStateData) Reset()         { *m = UserAccountStateData{} }
func (m *UserAccountStateData) String() string { return proto.CompactTextString(m) }
func (*UserAccountStateData) ProtoMessage()    {}
func (*UserAccountStateData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b15fe763a32a1aa9, []int{4}
}
func (m *UserAccountStateData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAccountStateData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAccountStateData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAccountStateData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAccountStateData.Merge(m, src)
}
func (m *UserAccountStateData) XXX_Size() int {
	return m.Size()
}
func (m *UserAccountStateData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAccountStateData.DiscardUnknown(m)
}

var xxx_messageInfo_UserAccountStateData proto.InternalMessageInfo

func (m *UserAccountStateData) GetDeactivation() *UserAccountDeactivationData {
	if m != nil {
		return m.Deactivation
	}
	return nil
}

type UserContactInfoData struct {
	// User's primary public phone number. This field will only be provided if
	// the requesting context has permission to access this information.
	PhoneNumber string `protobuf:"bytes,1,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
}

func (m *UserContactInfoData) Reset()         { *m = UserContactInfoData{} }
func (m *UserContactInfoData) String() string { return proto.CompactTextString(m) }
func (*UserContactInfoData) ProtoMessage()    {}
func (*UserContactInfoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b15fe763a32a1aa9, []int{5}
}
func (m *UserContactInfoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserContactInfoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserContactInfoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserContactInfoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserContactInfoData.Merge(m, src)
}
func (m *UserContactInfoData) XXX_Size() int {
	return m.Size()
}
func (m *UserContactInfoData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserContactInfoData.DiscardUnknown(m)
}

var xxx_messageInfo_UserContactInfoData proto.InternalMessageInfo

func (m *UserContactInfoData) GetPhoneNumber() string {
	if m != nil {
		return m.PhoneNumber
	}
	return ""
}

type UserInfoData struct {
	AccountInfo *UserAccountInfoData `protobuf:"bytes,2,opt,name=account_info,json=accountInfo,proto3" json:"account_info,omitempty"`
	BaseProfile *UserBaseProfileData `protobuf:"bytes,5,opt,name=base_profile,json=baseProfile,proto3" json:"base_profile,omitempty"`
	ContactInfo *UserContactInfoData `protobuf:"bytes,6,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
}

func (m *UserInfoData) Reset()         { *m = UserInfoData{} }
func (m *UserInfoData) String() string { return proto.CompactTextString(m) }
func (*UserInfoData) ProtoMessage()    {}
func (*UserInfoData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b15fe763a32a1aa9, []int{6}
}
func (m *UserInfoData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfoData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfoData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfoData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoData.Merge(m, src)
}
func (m *UserInfoData) XXX_Size() int {
	return m.Size()
}
func (m *UserInfoData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoData.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoData proto.InternalMessageInfo

func (m *UserInfoData) GetAccountInfo() *UserAccountInfoData {
	if m != nil {
		return m.AccountInfo
	}
	return nil
}

func (m *UserInfoData) GetBaseProfile() *UserBaseProfileData {
	if m != nil {
		return m.BaseProfile
	}
	return nil
}

func (m *UserInfoData) GetContactInfo() *UserContactInfoData {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*UserBaseProfileData)(nil), "azgrpc.iam.v1.UserBaseProfileData")
	proto.RegisterType((*UserAccountVerificationData)(nil), "azgrpc.iam.v1.UserAccountVerificationData")
	proto.RegisterType((*UserAccountDeactivationData)(nil), "azgrpc.iam.v1.UserAccountDeactivationData")
	proto.RegisterType((*UserAccountInfoData)(nil), "azgrpc.iam.v1.UserAccountInfoData")
	proto.RegisterType((*UserAccountStateData)(nil), "azgrpc.iam.v1.UserAccountStateData")
	proto.RegisterType((*UserContactInfoData)(nil), "azgrpc.iam.v1.UserContactInfoData")
	proto.RegisterType((*UserInfoData)(nil), "azgrpc.iam.v1.UserInfoData")
}

func init() { proto.RegisterFile("azgrpc/iam/v1/user.proto", fileDescriptor_b15fe763a32a1aa9) }

var fileDescriptor_b15fe763a32a1aa9 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4f, 0x6b, 0xd4, 0x40,
	0x14, 0xdf, 0xb1, 0x5a, 0xea, 0x24, 0x22, 0xae, 0x1e, 0x82, 0x42, 0xd8, 0xe6, 0x54, 0x0a, 0x26,
	0x74, 0xbd, 0x28, 0x1e, 0xc4, 0x5a, 0x0f, 0x05, 0x59, 0x24, 0x52, 0x0f, 0x5e, 0xc2, 0xcb, 0x64,
	0xb2, 0x1d, 0xc8, 0xcc, 0x84, 0xc9, 0x24, 0xd0, 0x7e, 0x0a, 0xbf, 0x8c, 0xdf, 0xc1, 0x63, 0x8f,
	0x1e, 0x65, 0xf3, 0x45, 0x24, 0x93, 0x64, 0x93, 0x2c, 0xac, 0x1e, 0x3c, 0xce, 0x6f, 0xde, 0xef,
	0xcf, 0x7b, 0xbc, 0x87, 0x1d, 0xb8, 0x5d, 0xab, 0x9c, 0x04, 0x0c, 0x78, 0x50, 0x9d, 0x05, 0x65,
	0x41, 0x95, 0x9f, 0x2b, 0xa9, 0xe5, 0xfc, 0x51, 0xfb, 0xe3, 0x33, 0xe0, 0x7e, 0x75, 0xe6, 0x25,
	0xf8, 0xe9, 0x55, 0x41, 0xd5, 0x39, 0x14, 0xf4, 0xb3, 0x92, 0x29, 0xcb, 0xe8, 0x05, 0x68, 0x98,
	0x1f, 0x63, 0x3b, 0x61, 0x45, 0x9e, 0xc1, 0x4d, 0x24, 0x80, 0x53, 0x07, 0x2d, 0xd0, 0xc9, 0xc3,
	0xd0, 0xea, 0xb0, 0x15, 0x70, 0x3a, 0x3f, 0xc5, 0x4f, 0xf2, 0x96, 0x11, 0x31, 0x0e, 0x6b, 0x1a,
	0x95, 0x2a, 0x73, 0xee, 0x99, 0xba, 0xc7, 0xdd, 0xc7, 0x65, 0x83, 0x5f, 0xa9, 0xcc, 0x7b, 0x83,
	0x5f, 0x34, 0x2e, 0xef, 0x09, 0x91, 0xa5, 0xd0, 0x5f, 0xa9, 0x62, 0x29, 0x23, 0xa0, 0x99, 0x14,
	0xc6, 0xed, 0x39, 0x3e, 0xaa, 0x0c, 0x46, 0x13, 0xe3, 0x74, 0x14, 0x6e, 0xdf, 0xde, 0xbb, 0x09,
	0xf5, 0x82, 0x02, 0xd1, 0xac, 0x1a, 0xa8, 0x0b, 0x6c, 0x25, 0x3d, 0xb6, 0x65, 0x8f, 0x21, 0xef,
	0x07, 0x6a, 0x5b, 0xec, 0x14, 0x2e, 0x45, 0x2a, 0x0d, 0x73, 0x85, 0xed, 0x6a, 0x14, 0xc4, 0x39,
	0x58, 0xa0, 0x13, 0x6b, 0x79, 0xea, 0x4f, 0xe6, 0xe3, 0xff, 0x25, 0x76, 0x38, 0xe1, 0x37, 0x7a,
	0xc9, 0x28, 0x9d, 0x73, 0xff, 0x5f, 0x7a, 0xbb, 0xbd, 0x84, 0x13, 0xbe, 0x97, 0xe2, 0x67, 0xa3,
	0xe2, 0x2f, 0x1a, 0x34, 0xed, 0x73, 0x4f, 0x7c, 0x0e, 0xfe, 0xd3, 0xe7, 0x75, 0x3b, 0x9e, 0x0f,
	0x52, 0x68, 0x20, 0xc3, 0x78, 0x8e, 0xb1, 0x9d, 0x5f, 0x4b, 0x41, 0x23, 0x51, 0xf2, 0x98, 0xaa,
	0x7e, 0x03, 0x0c, 0xb6, 0x32, 0x90, 0x57, 0x23, 0x6c, 0x37, 0xd4, 0x2d, 0xe7, 0x23, 0xb6, 0xa1,
	0xf5, 0x8c, 0x98, 0x48, 0xa5, 0xd9, 0x06, 0x6b, 0xe9, 0xed, 0x8f, 0xd6, 0x33, 0x43, 0x0b, 0x06,
	0xa0, 0x91, 0x89, 0xa1, 0xa0, 0x51, 0xb7, 0x45, 0xce, 0x83, 0xbd, 0x32, 0x3b, 0x6b, 0x1b, 0x5a,
	0xf1, 0x00, 0x34, 0x32, 0xa4, 0x6d, 0xaa, 0x4d, 0x73, 0xb8, 0x57, 0x66, 0xa7, 0xf7, 0xd0, 0x22,
	0x03, 0x70, 0xfe, 0xe9, 0xe7, 0xc6, 0x45, 0x77, 0x1b, 0x17, 0xfd, 0xde, 0xb8, 0xe8, 0x7b, 0xed,
	0xce, 0xee, 0x6a, 0x77, 0xf6, 0xab, 0x76, 0x67, 0xdf, 0x96, 0x6b, 0xa6, 0xaf, 0xcb, 0xd8, 0x27,
	0x92, 0x07, 0x90, 0x65, 0xf2, 0xe6, 0x96, 0x96, 0x45, 0xb0, 0x96, 0x2f, 0xbb, 0xe3, 0x9b, 0xdc,
	0xe0, 0x5b, 0x06, 0x3c, 0x8f, 0xe3, 0x43, 0x73, 0x85, 0xaf, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x08, 0xb0, 0xb6, 0xdc, 0xa1, 0x03, 0x00, 0x00,
}

func (m *UserBaseProfileData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBaseProfileData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserBaseProfileData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProfileImageUrl) > 0 {
		i -= len(m.ProfileImageUrl)
		copy(dAtA[i:], m.ProfileImageUrl)
		i = encodeVarintUser(dAtA, i, uint64(len(m.ProfileImageUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintUser(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserAccountVerificationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAccountVerificationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAccountVerificationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Verified {
		i--
		if m.Verified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserAccountDeactivationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAccountDeactivationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAccountDeactivationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deactivated {
		i--
		if m.Deactivated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserAccountInfoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAccountInfoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAccountInfoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deactivation != nil {
		{
			size, err := m.Deactivation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Verification != nil {
		{
			size, err := m.Verification.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *UserAccountStateData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAccountStateData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAccountStateData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deactivation != nil {
		{
			size, err := m.Deactivation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *UserContactInfoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserContactInfoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserContactInfoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PhoneNumber) > 0 {
		i -= len(m.PhoneNumber)
		copy(dAtA[i:], m.PhoneNumber)
		i = encodeVarintUser(dAtA, i, uint64(len(m.PhoneNumber)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserInfoData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfoData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContactInfo != nil {
		{
			size, err := m.ContactInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.BaseProfile != nil {
		{
			size, err := m.BaseProfile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.AccountInfo != nil {
		{
			size, err := m.AccountInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUser(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func encodeVarintUser(dAtA []byte, offset int, v uint64) int {
	offset -= sovUser(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserBaseProfileData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	l = len(m.ProfileImageUrl)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserAccountVerificationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Verified {
		n += 2
	}
	return n
}

func (m *UserAccountDeactivationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deactivated {
		n += 2
	}
	return n
}

func (m *UserAccountInfoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Verification != nil {
		l = m.Verification.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.Deactivation != nil {
		l = m.Deactivation.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserAccountStateData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Deactivation != nil {
		l = m.Deactivation.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserContactInfoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PhoneNumber)
	if l > 0 {
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func (m *UserInfoData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountInfo != nil {
		l = m.AccountInfo.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.BaseProfile != nil {
		l = m.BaseProfile.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	if m.ContactInfo != nil {
		l = m.ContactInfo.Size()
		n += 1 + l + sovUser(uint64(l))
	}
	return n
}

func sovUser(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUser(x uint64) (n int) {
	return sovUser(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserBaseProfileData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBaseProfileData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBaseProfileData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileImageUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileImageUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAccountVerificationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAccountVerificationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAccountVerificationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAccountDeactivationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAccountDeactivationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAccountDeactivationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deactivated = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAccountInfoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAccountInfoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAccountInfoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verification", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Verification == nil {
				m.Verification = &UserAccountVerificationData{}
			}
			if err := m.Verification.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deactivation == nil {
				m.Deactivation = &UserAccountDeactivationData{}
			}
			if err := m.Deactivation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAccountStateData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAccountStateData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAccountStateData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deactivation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deactivation == nil {
				m.Deactivation = &UserAccountDeactivationData{}
			}
			if err := m.Deactivation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserContactInfoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserContactInfoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserContactInfoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PhoneNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PhoneNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfoData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUser
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountInfo == nil {
				m.AccountInfo = &UserAccountInfoData{}
			}
			if err := m.AccountInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseProfile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseProfile == nil {
				m.BaseProfile = &UserBaseProfileData{}
			}
			if err := m.BaseProfile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUser
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUser
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUser
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContactInfo == nil {
				m.ContactInfo = &UserContactInfoData{}
			}
			if err := m.ContactInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUser(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUser
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUser(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUser
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUser
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUser
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUser
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUser
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUser        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUser          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUser = fmt.Errorf("proto: unexpected end of group")
)
