// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: azgrpc/iam/v1/authorization.proto

package iampb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AuthorizationData struct {
	// The other authorization which has been authorized to represent the this
	// this authorization.
	AssumingAuthorization *AuthorizationData `protobuf:"bytes,1,opt,name=assuming_authorization,json=assumingAuthorization,proto3" json:"assuming_authorization,omitempty"`
	// Authorization ID is an identifier of an authorization. It's
	// unique within the system. It's a session identifier.
	AuthorizationId string `protobuf:"bytes,2,opt,name=authorization_id,json=authorizationId,proto3" json:"authorization_id,omitempty"`
	// The expiry time of this authorization. Clients are recommended to refresh
	// the authorization before current authorization expired (~1 minute before
	// expired).
	ExpiryTime *types.Timestamp `protobuf:"bytes,3,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	// The ID of the user who granted this authorization, if any.
	SubjectUserId string `protobuf:"bytes,4,opt,name=subject_user_id,json=subjectUserId,proto3" json:"subject_user_id,omitempty"`
}

func (m *AuthorizationData) Reset()         { *m = AuthorizationData{} }
func (m *AuthorizationData) String() string { return proto.CompactTextString(m) }
func (*AuthorizationData) ProtoMessage()    {}
func (*AuthorizationData) Descriptor() ([]byte, []int) {
	return fileDescriptor_04180217f605c2d5, []int{0}
}
func (m *AuthorizationData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthorizationData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthorizationData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuthorizationData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthorizationData.Merge(m, src)
}
func (m *AuthorizationData) XXX_Size() int {
	return m.Size()
}
func (m *AuthorizationData) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthorizationData.DiscardUnknown(m)
}

var xxx_messageInfo_AuthorizationData proto.InternalMessageInfo

func (m *AuthorizationData) GetAssumingAuthorization() *AuthorizationData {
	if m != nil {
		return m.AssumingAuthorization
	}
	return nil
}

func (m *AuthorizationData) GetAuthorizationId() string {
	if m != nil {
		return m.AuthorizationId
	}
	return ""
}

func (m *AuthorizationData) GetExpiryTime() *types.Timestamp {
	if m != nil {
		return m.ExpiryTime
	}
	return nil
}

func (m *AuthorizationData) GetSubjectUserId() string {
	if m != nil {
		return m.SubjectUserId
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthorizationData)(nil), "azgrpc.iam.v1.AuthorizationData")
}

func init() { proto.RegisterFile("azgrpc/iam/v1/authorization.proto", fileDescriptor_04180217f605c2d5) }

var fileDescriptor_04180217f605c2d5 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x3b, 0xdf, 0x27, 0x82, 0x53, 0x4a, 0x35, 0xa0, 0x94, 0x2e, 0xc6, 0xea, 0x42, 0xea,
	0xc2, 0x19, 0x5a, 0x97, 0x5d, 0x29, 0x6e, 0x0a, 0xae, 0x8a, 0x22, 0xb8, 0x09, 0x93, 0x64, 0x9c,
	0x8e, 0x64, 0x3a, 0x61, 0xfe, 0x14, 0x9b, 0xa7, 0xf0, 0xb1, 0x5c, 0x76, 0xe9, 0x52, 0x92, 0xd7,
	0x70, 0x21, 0x49, 0x1a, 0x70, 0x70, 0x7b, 0xee, 0xb9, 0xe7, 0x77, 0x0f, 0x17, 0x9e, 0xd1, 0x9c,
	0xeb, 0x2c, 0x26, 0x82, 0x4a, 0xb2, 0x9e, 0x10, 0xea, 0xec, 0x52, 0x69, 0x91, 0x53, 0x2b, 0xd4,
	0x0a, 0x67, 0x5a, 0x59, 0x15, 0xf4, 0x1a, 0x0b, 0x16, 0x54, 0xe2, 0xf5, 0x64, 0x78, 0xca, 0x95,
	0xe2, 0x29, 0x23, 0xf5, 0x30, 0x72, 0x2f, 0xc4, 0x0a, 0xc9, 0x8c, 0xa5, 0x32, 0x6b, 0xfc, 0xe7,
	0xdf, 0x00, 0x1e, 0xdd, 0xfc, 0xce, 0xb9, 0xa3, 0x96, 0x06, 0x4f, 0xf0, 0x84, 0x1a, 0xe3, 0xa4,
	0x58, 0xf1, 0xd0, 0xa3, 0x0c, 0xc0, 0x08, 0x8c, 0xbb, 0xd3, 0x11, 0xf6, 0x30, 0xf8, 0x4f, 0xc2,
	0xe2, 0xb8, 0xdd, 0xf7, 0x46, 0xc1, 0x25, 0x3c, 0xf4, 0xf2, 0x42, 0x91, 0x0c, 0xfe, 0x8d, 0xc0,
	0xf8, 0x60, 0xd1, 0xf7, 0xf4, 0x79, 0x12, 0xcc, 0x60, 0x97, 0xbd, 0x65, 0x42, 0x6f, 0xc2, 0xea,
	0xe6, 0xc1, 0xff, 0x1a, 0x3c, 0xc4, 0x4d, 0x21, 0xdc, 0x16, 0xc2, 0x0f, 0x6d, 0xa1, 0x05, 0x6c,
	0xec, 0x95, 0x10, 0x5c, 0xc0, 0xbe, 0x71, 0xd1, 0x2b, 0x8b, 0x6d, 0xe8, 0x0c, 0xd3, 0x15, 0x66,
	0xaf, 0xc6, 0xf4, 0x76, 0xf2, 0xa3, 0x61, 0x7a, 0x9e, 0xdc, 0xde, 0x7f, 0x14, 0x08, 0x6c, 0x0b,
	0x04, 0xbe, 0x0a, 0x04, 0xde, 0x4b, 0xd4, 0xd9, 0x96, 0xa8, 0xf3, 0x59, 0xa2, 0xce, 0xf3, 0x94,
	0x0b, 0xbb, 0x74, 0x11, 0x8e, 0x95, 0x24, 0x34, 0x4d, 0xd5, 0x26, 0x67, 0xce, 0x10, 0xae, 0xae,
	0x76, 0x3f, 0xf0, 0x5e, 0x31, 0x13, 0x54, 0x66, 0x51, 0xb4, 0x5f, 0x5f, 0x75, 0xfd, 0x13, 0x00,
	0x00, 0xff, 0xff, 0xd2, 0xc5, 0x8b, 0xf8, 0xa8, 0x01, 0x00, 0x00,
}

func (m *AuthorizationData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthorizationData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuthorizationData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubjectUserId) > 0 {
		i -= len(m.SubjectUserId)
		copy(dAtA[i:], m.SubjectUserId)
		i = encodeVarintAuthorization(dAtA, i, uint64(len(m.SubjectUserId)))
		i--
		dAtA[i] = 0x22
	}
	if m.ExpiryTime != nil {
		{
			size, err := m.ExpiryTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthorization(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuthorizationId) > 0 {
		i -= len(m.AuthorizationId)
		copy(dAtA[i:], m.AuthorizationId)
		i = encodeVarintAuthorization(dAtA, i, uint64(len(m.AuthorizationId)))
		i--
		dAtA[i] = 0x12
	}
	if m.AssumingAuthorization != nil {
		{
			size, err := m.AssumingAuthorization.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAuthorization(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthorization(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthorization(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AuthorizationData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssumingAuthorization != nil {
		l = m.AssumingAuthorization.Size()
		n += 1 + l + sovAuthorization(uint64(l))
	}
	l = len(m.AuthorizationId)
	if l > 0 {
		n += 1 + l + sovAuthorization(uint64(l))
	}
	if m.ExpiryTime != nil {
		l = m.ExpiryTime.Size()
		n += 1 + l + sovAuthorization(uint64(l))
	}
	l = len(m.SubjectUserId)
	if l > 0 {
		n += 1 + l + sovAuthorization(uint64(l))
	}
	return n
}

func sovAuthorization(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthorization(x uint64) (n int) {
	return sovAuthorization(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AuthorizationData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthorization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthorizationData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthorizationData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssumingAuthorization", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthorization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AssumingAuthorization == nil {
				m.AssumingAuthorization = &AuthorizationData{}
			}
			if err := m.AssumingAuthorization.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthorization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAuthorization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiryTime == nil {
				m.ExpiryTime = &types.Timestamp{}
			}
			if err := m.ExpiryTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubjectUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthorization
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubjectUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthorization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthorization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthorization(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthorization
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthorization
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthorization
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthorization
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthorization        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthorization          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthorization = fmt.Errorf("proto: unexpected end of group")
)
